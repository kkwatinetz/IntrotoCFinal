/*   NAME OF STUDENTS:
	 Katie Kwatinetz
	 Lanaiya Walters
	 Jimmy Winchester
*/

//Directives

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>


#define MAX_STUDENTS 100
#define MAX_FACULTY 30
#define TRUE 1
#define FALSE 0



typedef struct
{
    char name[50];
    char id[25];
    float gpa;
    int creditHours;
} student;

typedef struct
{
    char name[50];
    char id[25];
    char department[10];
    char rank[10];

} faculty;


//Prototypes

void setStudents(student array[]);
void setFaculty(faculty array[]);
void toUpperCase(char str[]);
int printStudentInvoice(student array[], const char *id);
int printFacultyInfo(faculty array[], const char *id);
void addNewStudent(student array[], student newStudent);
void addNewFaculty(faculty *array, faculty *acc);
void sortByFName(faculty array[]);
void sortByDepartment(faculty array[]);
void sortByRank(faculty array[]);
void sortBySName(student array[]);
void sortByGPA(student array[]);
float calculateStudentInvoice(student s);
int validateDepartment(char department[]);
int validateRank(char rank[]);
int validateId(char id[]);
int menu();

//---------------------------------------------------------------------
int menu() {
    int option;
    int firsttime = 1;

    do {
        if (firsttime != 1)
        {
            printf("\nInvalid entry- please try again.\n\n");
        }
        else
        {
            printf("Choose one of the following options: \n");
            printf("1 - Add a new faculty member\n");
            printf("2 - Add a new student\n");
            printf("3 - Print tuition invoice for a student\n");
            printf("4 - Print information of a faculty member\n");
            printf("5 - Exit Program\n");
            firsttime++;
        }
        printf("\tEnter your selection:");
        if (scanf("%d", &option) != 1)
        {
            // Clear invalid input from buffer
            while (getchar() != '\n');
            option = -1; // Set option to an invalid value to stay in the loop
        }

    } while (option > 5 || option < 1);

    return option;
}

//---------------------------------------------------------------------
void setStudents(student array[])
{
    for (int i = 0; i < MAX_STUDENTS; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "ZZ000000");
        array[i].gpa = 0.0;
        array[i].creditHours = 0;
    }
}

//---------------------------------------------------------------------
void setFaculty(faculty array[])
{
    for (int i = 0; i < MAX_FACULTY; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "ZZ000000");
        strcpy(array[i].department, "NONE");
        strcpy(array[i].rank, "NONE");
    }
}

//---------------------------------------------------------------------
void toUpperCase(char str[])
{
    for (int i = 0; str[i] != '\0'; i++)
    {
        str[i] = toupper(str[i]);
    }
}

//---------------------------------------------------------------------
int printStudentInvoice(student array[], const char *id)
{
    int found = 0;
    for (int i = 0; i < MAX_STUDENTS; i++) {
        if (strcmp(array[i].id, id) == 0) {
            found = 1;
            float totalInvoice = calculateStudentInvoice(array[i]);

            printf("\n-----------------------------------------------\n");
            printf("Student Name: %s\n", array[i].name);
            printf("Student ID: %s\n", array[i].id);
            printf("\nTuition Invoice:\n");
            printf("Credit Hours: %d\n", array[i].creditHours);
            printf("Cost per Credit Hour: $236.45\n");
            printf("Fees: $52.00\n");

            printf("\nTotal Invoice: $%.2f\n", totalInvoice);
            printf("-----------------------------------------------\n");
            break;
        }
    }

    // If student not found, print error message
    if (!found) {
        return 0;
    }
    return 1;
}

//---------------------------------------------------------------------
int printFacultyInfo(faculty array[], const char *id)
{
    int found = 0;
    for (int i = 0; i < MAX_FACULTY; i++) {
        if (strcmp(array[i].id, id) == 0) {
            found = 1;

            printf("\n-----------------------------------------------\n");
            printf("Faculty Name: %s\n", array[i].name);
            printf("Faculty ID: %s\n", array[i].id);
            printf("Department: %s\n", array[i].department);
            printf("Rank: %s\n", array[i].rank);
            printf("-----------------------------------------------\n");
            break;
        }
    }

    if (!found) {
       return 0;
    }
    return 1;
}

//---------------------------------------------------------------------
void addNewStudent(student array[], student newStudent)
{
    int i;
    for (i = 0; i < MAX_STUDENTS; i++) {
        if (strcmp(array[i].id, "ZZ000000") == 0)
        {
            strcpy(array[i].name, newStudent.name);
            strcpy(array[i].id, newStudent.id);
            array[i].gpa = newStudent.gpa;
            array[i].creditHours = newStudent.creditHours;
            break; // Exit the loop once the student is added
        }
    }
}

//---------------------------------------------------------------------
void addNewFaculty(faculty *array, faculty *acc)
{
    int index;
    for (index = 0; index < MAX_FACULTY; index++) 
    {
        if (strcmp((array + index)->id, "ZZ000000") == 0)
        {
            break;
        }
    }

    if (index < 30) {
        strcpy((array + index)->name, acc->name);
        strcpy((array + index)->rank, acc->rank);
        strcpy((array + index)->department, acc->department);
        strcpy((array + index)->id, acc->id);
    }
}

//---------------------------------------------------------------------
float calculateStudentInvoice(student s)
{
    float total;

    total = (s.creditHours * 236.45) + 52;

    if (s.gpa >= 3.85){
        total = total - (0.25 * total);
    }


    return total;
}

//---------------------------------------------------------------------
int validateDepartment(char department[])
{
    if(strcmp(department, "MATH") == 0 || strcmp(department, "CS") == 0 || strcmp(department, "SCIENCE") == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }

}

//---------------------------------------------------------------------
int validateRank(char rank[])
{
    if(strcmp(rank, "PROFESSOR") == 0 || strcmp(rank, "ADJUNCT") == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }

}

//---------------------------------------------------------------------
int validateId(char id[])
{
    int i;
    int count = 0;

    for (i = 0; i < 2; i++){
        if (!isdigit(id[i])){
            count++;
        }
    }

    for (i = 2; i < 8; i++){
        if (isdigit(id[i])){
            count++;
        }
    }

    if (count == 8) return 1;
    else return 0;
}

//---------------------------------------------------------------------
void sortByFName(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].name, array[i + 1].name) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }
}

//---------------------------------------------------------------------
void sortByDepartment(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].department, array[i + 1].department) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}

//---------------------------------------------------------------------
void sortByRank(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].rank, array[i + 1].rank) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}

//---------------------------------------------------------------------
void sortBySName(student array[])
{
    student temp;
    for (int j = 0; j < MAX_STUDENTS - 1; j++) {
        for (int i = 0; i < MAX_STUDENTS - j - 1; i++) {
            if (strcmp(array[i].name, array[i + 1].name) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}

//---------------------------------------------------------------------
void sortByGPA(student array[])
{
    student temp;
    for (int j = 0; j < MAX_STUDENTS - 1; j++) {
        for (int i = 0; i < MAX_STUDENTS - j - 1; i++) {
            if (array[i].gpa > array[i + 1].gpa) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}

//---------------------------------------------------------------------
int main() {
    student students[MAX_STUDENTS];
    faculty facultyMembers[MAX_FACULTY];
    setStudents(students);
    setFaculty(facultyMembers);

    int option = 1;
    student newStudent;
    faculty newFaculty;
    char tempDept[20], tempRank[20];
    char tempId[9];
    float tempGpa;
    int tempCredits;
    char printReport;
    char sortFaculty;
    char sortStudent;

    printf("\t\t\tWelcome to PerPro\n");

    while (option != 5) {
        option = menu();

        switch (option) {
            case 1:
                printf("Enter the facultyâ€™s info:\n");

                printf("\tName of the faculty: ");
                getchar();  // Clear buffer
                fgets(newFaculty.name, sizeof(newFaculty.name), stdin);
                newFaculty.name[strcspn(newFaculty.name, "\n")] = 0;

                // Repeatedly ask for a valid ID
                while (TRUE) {
                    printf("\tID: ");
                    scanf("%s", tempId);
                    if (validateId(tempId)) {
                        strcpy(newFaculty.id, tempId);
                        break;  // Exit loop if ID is valid
                    } else {
                        printf("\tInvalid ID format. Please enter a valid ID.\n");
                    }
                }

                // Repeatedly ask for a valid Rank
                while (TRUE)
                {
                    printf("\tRank: ");
                    getchar();  // Clear buffer before reading rank
                    fgets(tempRank, sizeof(tempRank), stdin);
                    tempRank[strcspn(tempRank, "\n")] = 0;  // Ensure the newline is removed
                    toUpperCase(tempRank);  // Convert to uppercase

                    if (validateRank(tempRank))
                    {
                        strcpy(newFaculty.rank, tempRank);  // Store rank
                        break;  // Exit loop if rank is valid
                    }
                    else
                    {
                        printf("\t\tSorry entered rank %s is invalid. Try again.\n", tempRank);
                    }
                }

                // Repeatedly ask for a valid Department
                while (TRUE) {
                    printf("\tDepartment: ");
                    fgets(tempDept, sizeof(tempDept), stdin);
                    tempDept[strcspn(tempDept, "\n")] = 0;
                    toUpperCase(tempDept);

                    if (validateDepartment(tempDept))
                    {
                        strcpy(newFaculty.department, tempDept);
                        break;  // Exit loop if department is valid
                    } else {
                        printf("\t\tSorry entered department %s is invalid. Try again.\n", tempDept);
                    }
                }

                addNewFaculty(facultyMembers, &newFaculty);
                printf("Thanks!\n\n");
                break;

            case 2:
                printf("Enter studentâ€™s info:\n");

                printf("\tName of student: ");
                getchar();  // Clear buffer
                fgets(newStudent.name, sizeof(newStudent.name), stdin);
                newStudent.name[strcspn(newStudent.name, "\n")] = 0;

                // Repeatedly ask for a valid ID
                while (TRUE) {
                    printf("\tID: ");
                    scanf("%s", tempId);
                    if (validateId(tempId)) {
                        strcpy(newStudent.id, tempId);
                        break;  // Exit loop if ID is valid
                    } else {
                        printf("\tInvalid ID format. Please enter a valid ID.\n");
                    }
                }

                // Repeatedly ask for a valid GPA
                while (TRUE) {
                    printf("\tGPA: ");
                    if (scanf("%f", &tempGpa) == 1 && tempGpa >= 0.0 && tempGpa <= 4.0) {
                        newStudent.gpa = tempGpa;
                        break;  // Exit loop if GPA is valid
                    } else {
                        printf("\tInvalid GPA. Please enter a valid GPA (0.0 - 4.0).\n");
                        while (getchar() != '\n');  // Clear buffer
                    }
                }

                // Repeatedly ask for valid credit hours
                while (TRUE) {
                    printf("\tCredit hours: ");
                    if (scanf("%d", &tempCredits) == 1 && tempCredits >= 0) {
                        newStudent.creditHours = tempCredits;
                        break;  // Exit loop if credit hours are valid
                    } else {
                        printf("\tInvalid credit hours. Please enter a valid number of credit hours.\n");
                        while (getchar() != '\n');  // Clear buffer
                    }
                }

                addNewStudent(students, newStudent);
                printf("Thanks!\n\n");
                break;

            case 3:
                 while (TRUE)
                 {
                    printf("Enter the studentâ€™s ID: ");
                    scanf("%s", tempId);

                    if (!printStudentInvoice(students, tempId))
                    {
                            printf("Sorry-student not found! Please try again.\n");
                    }
                    else
                    {
                        printf("Here is the tuition invoice for %s:\n", tempId);
                        printStudentInvoice(students, tempId);
                        break;
                    }
                }
                break;

            case 4:
                while (TRUE)
                {
                    printf("Enter the facultyâ€™s ID: ");
                    scanf("%s", tempId);


                    if (!printFacultyInfo(facultyMembers, tempId))
                    {
                        printf("Sorry, faculty with ID %s does not exist. Please try again.\n", tempId);
                    }
                    else
                    {
                        printf("Faculty found!\n");
                        printFacultyInfo(facultyMembers, tempId);
                        break;
                    }
                }
                break;

            case 5:
                printf("Would you like to print the final report (Y/N): ");
                getchar();  // Clear buffer
                scanf("%c", &printReport);
                printReport = toupper(printReport);
                if (printReport == 'Y') {
                    printf("Enter\n");
                    printf("N or n to sort the faculty by name\n");
                    printf("D or d to sort the faculty by department\n");
                    printf("R or r to sort the faculty by rank\n");
                    getchar();  // Clear buffer
                    scanf("%c", &sortFaculty);
                    sortFaculty = toupper(sortFaculty);
                    if (sortFaculty == 'N') {
                        sortByFName(facultyMembers);
                    } else if (sortFaculty == 'D') {
                        sortByDepartment(facultyMembers);
                    } else if (sortFaculty == 'R') {
                        sortByRank(facultyMembers);
                    } else {
                        printf("Invalid input for faculty sort.\n");
                    }

                    printf("Enter\n");
                    printf("N or n to sort the students by name\n");
                    printf("G or g to sort the students by gpa\n");
                    getchar();  // Clear buffer
                    scanf("%c", &sortStudent);
                    sortStudent = toupper(sortStudent);
                    if (sortStudent == 'N') {
                        sortBySName(students);
                    } else if (sortStudent == 'G') {
                        sortByGPA(students);
                    } else {
                        printf("Invalid input for student sort.\n");
                    }

                    printf("------    L I S T   O F   F A C U L T Y  -----\n");
                    for (int i = 0; i < MAX_FACULTY && strcmp(facultyMembers[i].id, "ZZ000000") != 0; i++) {
                        printf("Name: %s, ID: %s, Department: %s, Rank: %s\n", facultyMembers[i].name, facultyMembers[i].id, facultyMembers[i].department, facultyMembers[i].rank);
                    }

                    printf("------    L I S T   O F   S T U D E N T S  -----\n");
                    for (int i = 0; i < MAX_STUDENTS && strcmp(students[i].id, "ZZ000000") != 0; i++) {
                        printf("Name: %s, ID: %s, GPA: %.2f\n", students[i].name, students[i].id, students[i].gpa);
                    }
                    printf("Thank you for using PerPro. Goodbye!\n");
                } else {
                    printf("Thank you for using PerPro. Goodbye!\n");
                }
                break;
        }
    }

    return 0;
}
