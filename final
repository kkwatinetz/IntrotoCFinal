/*   NAME OF STUDENTS:
	 Katie Kwatinetz
	 Lanaiya Walters
	 Jimmy Winchester
*/


#include<stdlib.h>
#include<stdio.h>
#include<string.h>


#define MAX_STUDENTS 100
#define MAX_FACULTY 30


typedef struct
{
    char name[50];
    char id[25];
    float gpa;
    int creditHours;

} student;

typedef struct
{
    char name[50];
    char id[25];
    char department[10];
    char rank[10];

} faculty;


int menu();
void setStudents(student array[]);
void setFaculty(faculty array[]);
void printStudentInvoice(student array[])
void printFacultyInfo(faculty array[])
void addNewStudent(student array[], student newStudent);
void addNewFaculty(faculty *array, faculty *acc);
float calculateStudentInvoice(student s);
int validateDepartment(char department[]);
int validateRank(char rank[]);
int validateId(char id[]);


int menu() {
    int option;
    int firsttime = 1;

    do {
        if (firsttime != 1) {
            printf("Sorry.....Invalid Option. Try again.\n\n ");
        }
        printf("Choose one of the following options: \n");
        printf("1 - Add a new faculty member\n");
        printf("2 - Add a new student\n");
        printf("3 - Print tuition invoice for a student\n");
        printf("4 - Print information of a faculty member\n");
        printf("0 - Exit Program\n");
        printf("Enter your selection: ");
        scanf("%d", &option);
        firsttime++;
    } while (option > 4 || option < 0);

    return option;
}


void setStudents(student array[])
{
    for (int i = 0; i < MAX_STUDENTS; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "00000000");
        array[i].gpa = 0.0;
        array[i].creditHours = 0;
    }
}

void setFaculty(faculty array[])
{
    for (int i = 0; i < MAX_FACULTY; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "00000000");
        strcpy(array[i].department, "NONE");
        strcpy(array[i].rank, "NONE");
    }
}

void printStudentInvoice(student array[])
{

}


void printFacultyInfo(faculty array[])
{

}

void addNewStudent(student array[], student newStudent)
{

}

void addNewFaculty(faculty *array, faculty *acc)
{
int index;
    for (index = 0; index < 1000; index++) {
        if ((array + index)->id == 0) {
            break;
        }
    }

    if (index < 30) {
        strcpy((array + index)->name, acc->name);
        strcpy((array + index)->rank, acc->rank);
        strcpy((array + index)->department, acc->department);
        strcpy((array + index)->id, acc->id);
    }
}

float calculateStudentInvoice(student s)
{


}
int validateDepartment(char department[])
{

}

int validateRank(char rank[]);
{

}

int validateId(char id[]);
{

}

int main() {
    student students[MAX_STUDENTS];
    faculty facultyMembers[MAX_FACULTY];
    setStudents(students);
    setFaculty(facultyMembers);

    int option = 1;
    student newStudent;
    faculty newFaculty;
    char tempDept[20], tempRank[20];
    char tempId[9];
    float tempGpa, tempInvoice;
    int tempCredits;

    while (option != 5) {
        option = menu();

        switch (option) {
            case 0:
                break;
            case 1:
                printf("Enter the faculty’s info:\n");

                printf("Name of the faculty: ");
                getchar();  // To consume newline
                fgets(newFaculty.name, sizeof(newFaculty.name), stdin);
                newFaculty.name[strcspn(newFaculty.name, "\n")] = 0;

                printf("ID: ");
                scanf("%s", tempId);
                if (!validateId(tempId)) {
                    printf("Invalid ID format\n");
                    break;
                }
                strcpy(newFaculty.id, tempId);

                printf("Rank: ");
                fgets(tempRank, sizeof(tempRank), stdin);
                tempRank[strcspn(tempRank, "\n")] = 0;
                if (!validateRank(tempRank)) {
                    printf("Invalid rank\n");
                    break;
                }
                strcpy(newFaculty.rank, tempRank);


                printf("Department: ");
                fgets(tempDept, sizeof(tempDept), stdin);
                tempDept[strcspn(tempDept, "\n")] = 0;
                if (!validateDepartment(tempDept)) {
                    printf("Invalid department\n");
                    break;
                }
                strcpy(newFaculty.department, tempDept);


                addNewFaculty(facultyMembers, newFaculty);


                printf("Thanks! ");

                break;
            case 2:
                student temps;

                printf("Enter the student’s info:\n");
                printf("Name of Student: ");


                printf("ID: ");

                printf("GPA: ");
                scanf("%f", &tempStudent.gpa);

                printf("Credit hours: ");
                scanf("%d", &tempStudent.creditHours);

                printf("Thanks! ");

                //addNewStudent();
                break;
            case 3:
                printf("Enter the student’s ID: ");
                printf("Here is the tuition invoice for %c : \n");
                printf("Sorry-student not found!\n");


                //printTuitionInvoice();
                break;
            case 4:
                printf("Enter the faculty’s ID: ");

                printf("Faculty found!\n");
                printf("Sorry, faculty with ID %s does not exist.\n");


                //printFaculty();

        }
    }

    return 0;
}

