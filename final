/*   NAME OF STUDENTS:
	 Katie Kwatinetz
	 Lanaiya Walters
	 Jimmy Winchester
*/


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>


#define MAX_STUDENTS 100
#define MAX_FACULTY 30


typedef struct
{
    char name[50];
    char id[25];
    float gpa;
    int creditHours;

} student;

typedef struct
{
    char name[50];
    char id[25];
    char department[10];
    char rank[10];

} faculty;


void setStudents(student array[]);
void setFaculty(faculty array[]);
void printStudentInvoice(student array[], const char *id);
void printFacultyInfo(faculty array[], const char *id);
void addNewStudent(student array[], student newStudent);
void addNewFaculty(faculty *array, faculty *acc);
void sortByFName(faculty array[]);
void sortByDepartment(faculty array[]);
void sortByRank(faculty array[]);
void sortBySName(student array[]);
void sortByGPA(student array[]);
float calculateStudentInvoice(student s);
int validateDepartment(char department[]);
int validateRank(char rank[]);
int validateId(char id[]);
int menu();


int menu() {
    int option;
    int firsttime = 1;

    do {
        if (firsttime != 1) {
            printf("Sorry.....Invalid Option. Try again.\n\n ");
        }
        printf("Choose one of the following options: \n");
        printf("1 - Add a new faculty member\n");
        printf("2 - Add a new student\n");
        printf("3 - Print tuition invoice for a student\n");
        printf("4 - Print information of a faculty member\n");
        printf("0 - Exit Program\n");
        printf("Enter your selection: ");
        scanf("%d", &option);
        firsttime++;
    } while (option > 4 || option < 0);

    return option;
}


void setStudents(student array[])
{
    for (int i = 0; i < MAX_STUDENTS; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "ZZ000000");
        array[i].gpa = 0.0;
        array[i].creditHours = 0;
    }
}

void setFaculty(faculty array[])
{
    for (int i = 0; i < MAX_FACULTY; i++)
    {
        strcpy(array[i].name, "ZZZZZZZZZZZZZ");
        strcpy(array[i].id, "ZZ000000");
        strcpy(array[i].department, "NONE");
        strcpy(array[i].rank, "NONE");
    }
}

void printStudentInvoice(student array[], const char *id)
{
    int found = 0;
    for (int i = 0; i < MAX_STUDENTS; i++) {
        if (strcmp(array[i].id, id) == 0) {
            found = 1;
            float totalInvoice = calculateStudentInvoice(array[i]);

            printf("\n-----------------------------------------------\n");
            printf("Student Name: %s\n", array[i].name);
            printf("Student ID: %s\n", array[i].id);
            printf("\nTuition Invoice:\n");
            printf("Credit Hours: %d\n", array[i].creditHours);
            printf("Cost per Credit Hour: $236.45\n");
            printf("Fees: $52.00\n");

            printf("\nTotal Invoice: $%.2f\n", totalInvoice);
            printf("-----------------------------------------------\n");
            break;
        }
    }

    // If student not found, print error message
    if (!found) {
        printf("Sorry, student with ID %s not found.\n", id);
    }
}


void printFacultyInfo(faculty array[], const char *id)
{
    int found = 0;
    for (int i = 0; i < MAX_FACULTY; i++) {
        if (strcmp(array[i].id, id) == 0) {
            found = 1;

            printf("\n-----------------------------------------------\n");
            printf("Faculty Name: %s\n", array[i].name);
            printf("Faculty ID: %s\n", array[i].id);
            printf("Department: %s\n", array[i].department);
            printf("Rank: %s\n", array[i].rank);
            printf("-----------------------------------------------\n");
            break;
        }
    }

    if (!found) {
        printf("Sorry, faculty member with ID %s not found.\n", id);
    }
}

void addNewStudent(student array[], student newStudent)
{
int i;

    for (i = 0; i < MAX_STUDENTS; i++){
        if (strcmp(array[i].id, "ZZ000000") == 0)
        {
            strcpy(array[i].name, newStudent.name);
            strcpy(array[i].id, newStudent.id);
            array[i].gpa = newStudent.gpa;
            array[i].creditHours = newStudent.creditHours;
        }
    }

}

void addNewFaculty(faculty *array, faculty *acc)
{
    int index;
    for (index = 0; index < 1000; index++) {
        if ((array + index)->id == 0) {
            break;
        }
    }

    if (index < 30) {
        strcpy((array + index)->name, acc->name);
        strcpy((array + index)->rank, acc->rank);
        strcpy((array + index)->department, acc->department);
        strcpy((array + index)->id, acc->id);
    }
}

float calculateStudentInvoice(student s)
{
    float total;

    total = (s.creditHours * 236.45) + 52;

    if (s.gpa >= 3.85){
        total = total - (0.25 * total);
    }


    return total;
}

int validateDepartment(char department[])
{
    if(strcmp(department, "MATH") == 0 || strcmp(department, "CS") == 0 || strcmp(department, "SCIENCE") == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }

}

int validateRank(char rank[])
{
    if(strcmp(rank, "PROFESSOR") == 0 || strcmp(rank, "ADJUNCT") == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }

}

int validateId(char id[])
{
    int i;
    int count = 0;
    
    for (i = 0; i < 2; i++){
        if (!isdigit(id[i])){
            count++;
        }
    }

    for (i = 2; i < 8; i++){
        if (isdigit(id[i])){
            count++;
        }
    }

    if (count == 8) return 1;
    else return 0;

}

void sortByFName(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].name, array[i + 1].name) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }
}
void sortByDepartment(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].department, array[i + 1].department) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}
void sortByRank(faculty array[])
{
    faculty temp;
    for (int j = 0; j < MAX_FACULTY - 1; j++) {
        for (int i = 0; i < MAX_FACULTY - j - 1; i++) {
            if (strcmp(array[i].rank, array[i + 1].rank) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}
void sortBySName(student array[])
{
    student temp;
    for (int j = 0; j < MAX_STUDENTS - 1; j++) {
        for (int i = 0; i < MAX_STUDENTS - j - 1; i++) {
            if (strcmp(array[i].name, array[i + 1].name) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}
void sortByGPA(student array[])
{
    student temp;
    for (int j = 0; j < MAX_STUDENTS - 1; j++) {
        for (int i = 0; i < MAX_STUDENTS - j - 1; i++) {
            if (strcmp(array[i].gpa, array[i + 1].gpa) > 0) { // Ascending order
                temp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = temp;
            }
        }
    }

}

int main() {
    student students[MAX_STUDENTS];
    faculty facultyMembers[MAX_FACULTY];
    setStudents(students);
    setFaculty(facultyMembers);

    int option = 1;
    student newStudent;
    faculty newFaculty;
    char tempDept[20], tempRank[20];
    char tempId[9];
    float tempGpa, tempInvoice;
    int tempCredits;
    char printReport;
    char sortFaculty;
    char sortStudent;

    while (option != 5) {
        option = menu();

        switch (option) {
            case 1:
                printf("Enter the facultyâ€™s info:\n");

                printf("Name of the faculty: ");
                getchar();  // To consume newline
                fgets(newFaculty.name, sizeof(newFaculty.name), stdin);
                newFaculty.name[strcspn(newFaculty.name, "\n")] = 0;

                printf("ID: ");
                scanf("%s", tempId);
                if (!validateId(tempId)) {
                    printf("Invalid ID format\n");
                    break;
                }
                strcpy(newFaculty.id, tempId);

                printf("Rank: ");
                fgets(tempRank, sizeof(tempRank), stdin);
                tempRank[strcspn(tempRank, "\n")] = 0;
                if (!validateRank(tempRank)) {
                    printf("Invalid rank\n");
                    break;
                }
                toUpperCase(tempRank);
                strcpy(newFaculty.rank, tempRank);


                printf("Department: ");
                fgets(tempDept, sizeof(tempDept), stdin);
                tempDept[strcspn(tempDept, "\n")] = 0;
                if (!validateDepartment(tempDept)) {
                    printf("Invalid department\n");
                    break;
                }
                toUpperCase(tempDept);
                strcpy(newFaculty.department, tempDept);


                addNewFaculty(facultyMembers, newFaculty);


                printf("Thanks! ");

                break;
            case 2:
                printf("Enter student's info:\n ");

                printf("Name of student: ");
                getchar();  // To consume newline
                fgets(newStudent.name, sizeof(newStudent.name), stdin);
                newStudent.name[strcspn(newStudent.name, "\n")] = 0;

                printf("ID: ");
                scanf("%s", tempId);
                if (!validateId(tempId)) {
                    printf("Invalid ID format\n");
                    break;
                }
                strcpy(newStudent.id, tempId);


                printf("GPA: ");
                scanf("%f", &tempGpa);
                newStudent.gpa = tempGpa;

                printf("Credit hours: ");
                scanf("%d", &tempCredits);
                newStudent.creditHours = tempCredits;

                addNewStudent(students, newStudent);

                printf("Thanks! ");

                break;
            case 3:
                printf("Enter the studentâ€™s ID: ");
                scanf("%s", tempId);

                if (!validateId(tempId)) {
                    printf("Sorry-student not found!\n");
                    break;
                }
                else
                {
                    strcpy(newStudent.id, tempId);
                    printf("Here is the tuition invoice for %c : \n");
                    printStudentInvoice(students, tempId);

                }

                break;
            case 4:
                printf("Enter the facultyâ€™s ID: ");
                scanf("%s", tempId);

                if (!validateId(tempId)) {
                    printf("Sorry, faculty with ID %s does not exist.\n", tempId);
                    break;
                    } else {
                printf("Faculty found!\n");
                printFacultyInfo(facultyMembers, tempId);  // Correct function to call
                }
                break;

            case 5:
                printf("Would you like to print the final report (Y/N): ");
                scanf("%c", &printReport);
                toUpperCase(printReport);
                if(strcmp(printReport, "Y"))
                {
                    printf("Enter\n")
                    printf("N or n to sort the faculty by name\n")
                    printf("D or d to sort the faculty by department\n")
                    printf("R or r to sort the faculty by rank");
                    scanf("%c", &sortFaculty);
                    toUpper(sortFaculty);
                    if(strcmp(sortFaculty, "N"))
                    {
                        sortByFName(faculty facultyMembers);
                    }
                    else if(strcmp(sortFaculty, "D"))
                    {
                        sortByDepartment(faculty facultyMembers);
                    }
                    else if(strcmp(sortFaculty, "R"))
                    {
                        sortByRank(faculty facultyMembers);
                    }

                    printf("Enter\n")
                    printf("N or n to sort the students by name\n")
                    printf("G or g to sort the students by gpa\n")
                    scanf("%c", &sortStudent);
                    toUpper(sortStudent);
                    if(strcmp(sortStudent, "N"))
                    {
                        sortBySName(student students);
                    }
                    else if(strcmp(sortStudent, "D"))
                    {
                        sortByGPA(student students);
                    }


                    printf("------    L I S T   O F   F A C U L T Y  -----");
                    printf(faculty facultyMembers);
                    pruntf("------    L I S T   O F   S T  U D E N T S  -----")
                    printf(student students);

                    printf("Thank you for using PerPro. Goodbye!\n");
                }
                else
                {
                    printf("Thank you for using PerPro. Goodbye!\n");
                }
                break;
            }
    }

    return 0;
}
