/*   NAME OF STUDENTS:
	 Katie Kwatinetz
	 Lanaiya Walters
	 Jimmy Winchester
*/


#include<stdlib.h>
#include<stdio.h>
#include<string.h>


typedef struct
{
    char name[50];
    char id[25];
    float gpa;
    int creditHours;

} student;

typedef struct
{
    char name[50];
    char id[25];
    char department[10];
    char rank[10];

} faculty;


int menu();
void addNewFaculty(faculty array[], faculty name, faculty id, faculty rank, faculty department);
void addNewStudent(student array[], student name, student id, student gpa, student creditHours);
void printTuitionInvoice(student array[], student id);
int printFacultyInfo(faculty array[], faculty id);

int menu() {
    int option;
    int firsttime = 1;

    do {
        if (firsttime != 1) {
            printf("Sorry.....Invalid Option. Try again.\n\n ");
        }
        printf("Choose one of the following options: \n");
        printf("1 - Add a new faculty member\n");
        printf("2 - Add a new student\n");
        printf("3 - Print tuition invoice for a student\n");
        printf("4 - Print information of a faculty member\n");
        printf("0 - Exit Program\n");
        printf("Enter your selection: ");
        scanf("%d", &option);
        firsttime++;
    } while (option > 4 || option < 0);

    return option;
}

void addNewFaculty(faculty array[], faculty name, faculty id, faculty rank, faculty department)
{

}

void addNewStudent(student array[], student name, student id, student gpa, student creditHours)
{

}

void printTuitionInvoice(student array[], student id)
{

}

void printFacultyInfo(faculty array[], faculty id)
{

}

int main() {
    faculty programF[30];
    student programS[100];
    int option = 1;
    float gpa;
    int id;
    int creditHours;

    while (option != 0) {
        option = menu();

        switch (option) {
            case 0:
                break;
            case 1:
                faculty tempf;

                printf("Enter the faculty’s info:\n");

                printf("Name of the faculty: ");
                getchar(); // Clear newline from buffer
                fgets(tempFaculty.name, sizeof(tempFaculty.name), stdin);
                tempFaculty.name[strcspn(tempFaculty.name, "\n")] = 0; // Remove newline

                printf("ID: ");
                fgets(tempFaculty.id, sizeof(tempFaculty.id), stdin);
                tempFaculty.id[strcspn(tempFaculty.id, "\n")] = 0; // Remove newline

                printf("Rank (professor or adjunct): ");
                fgets(tempFaculty.rank, sizeof(tempFaculty.rank), stdin);
                tempFaculty.rank[strcspn(tempFaculty.rank, "\n")] = 0; // Remove newline

                printf("Department (math, cs, or science): ");
                fgets(tempFaculty.department, sizeof(tempFaculty.department), stdin);
                tempFaculty.department[strcspn(tempFaculty.department, "\n")] = 0; // Remove newline


                printf("Thanks! ");

                addNewFaculty(programF, tempFaculty);
                break;
            case 2:
                student temps;

                printf("Enter the student’s info:\n");
                printf("Name of Student: ");
                getchar(); // Clear newline from buffer
                fgets(tempStudent.name, sizeof(tempStudent.name), stdin);
                tempStudent.name[strcspn(tempStudent.name, "\n")] = 0; // Remove newline

                printf("ID: ");
                fgets(tempStudent.id, sizeof(tempStudent.id), stdin);
                tempStudent.id[strcspn(tempStudent.id, "\n")] = 0; // Remove newline

                printf("GPA: ");
                scanf("%f", &tempStudent.gpa);

                printf("Credit hours: ");
                scanf("%d", &tempStudent.creditHours);

                printf("Thanks! ");

                addNewStudent(programS, tempStudent.id);
                break;
            case 3:
                printf("Enter the student’s ID: ");
                getchar(); // Clear newline from buffer
                fgets(temps.id, sizeof(temps.id), stdin);
                temps.id[strcspn(temps.id, "\n")] = 0; // Remove newline

                printTuitionInvoice(programS, temps.id);
                break;
            case 4:
                printf("Enter the faculty’s ID: ");
                getchar(); // Clear newline from buffer
                fgets(tempf.id, sizeof(tempf.id), stdin);
                tempf.id[strcspn(tempf.id, "\n")] = 0; // Remove newline

                if (printFacultyInfo(programF, tempf.id) == 1) {
                    printf("Faculty found!\n");
                } else {
                    printf("Sorry, faculty with ID %s does not exist.\n", tempf.id);
                }
        }
    }

    return 0;
}
